{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "663f2d67",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b5f9709",
   "metadata": {},
   "source": [
    "## Answer = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9d73dc25",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "356f3f2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "3a7a16d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "import statistics as st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "0344a89d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import seaborn as sn\n",
    "import statsmodels.formula.api as smf\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8b8289dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "from statsmodels.graphics.regressionplots import influence_plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "fb0ac6d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv(r\"C:\\Users\\user\\Downloads\\delivery_time.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5d597798",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery Time</th>\n",
       "      <th>Sorting Time</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13.50</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.75</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24.00</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>29.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>15.35</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>19.00</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>9.50</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>17.90</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>18.75</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>19.83</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>10.75</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>16.68</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>11.50</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>12.03</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>14.88</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>13.75</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18.11</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>8.00</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>17.83</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21.50</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Delivery Time  Sorting Time\n",
       "0           21.00            10\n",
       "1           13.50             4\n",
       "2           19.75             6\n",
       "3           24.00             9\n",
       "4           29.00            10\n",
       "5           15.35             6\n",
       "6           19.00             7\n",
       "7            9.50             3\n",
       "8           17.90            10\n",
       "9           18.75             9\n",
       "10          19.83             8\n",
       "11          10.75             4\n",
       "12          16.68             7\n",
       "13          11.50             3\n",
       "14          12.03             3\n",
       "15          14.88             4\n",
       "16          13.75             6\n",
       "17          18.11             7\n",
       "18           8.00             2\n",
       "19          17.83             7\n",
       "20          21.50             5"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7c064efa",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = data.rename(columns = {'Delivery Time': 'Delivery' , 'Sorting Time' :'Sorting'} )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "c257e940",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery</th>\n",
       "      <th>Sorting</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13.50</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.75</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24.00</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>29.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>15.35</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>19.00</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>9.50</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>17.90</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>18.75</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>19.83</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>10.75</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>16.68</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>11.50</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>12.03</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>14.88</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>13.75</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18.11</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>8.00</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>17.83</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21.50</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Delivery  Sorting\n",
       "0      21.00       10\n",
       "1      13.50        4\n",
       "2      19.75        6\n",
       "3      24.00        9\n",
       "4      29.00       10\n",
       "5      15.35        6\n",
       "6      19.00        7\n",
       "7       9.50        3\n",
       "8      17.90       10\n",
       "9      18.75        9\n",
       "10     19.83        8\n",
       "11     10.75        4\n",
       "12     16.68        7\n",
       "13     11.50        3\n",
       "14     12.03        3\n",
       "15     14.88        4\n",
       "16     13.75        6\n",
       "17     18.11        7\n",
       "18      8.00        2\n",
       "19     17.83        7\n",
       "20     21.50        5"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "7316d2ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery</th>\n",
       "      <th>Sorting</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>21.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13.50</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>19.75</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24.00</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>29.00</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Delivery  Sorting\n",
       "0     21.00       10\n",
       "1     13.50        4\n",
       "2     19.75        6\n",
       "3     24.00        9\n",
       "4     29.00       10"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "4aaa7799",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_new = np.log(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "281851f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery</th>\n",
       "      <th>Sorting</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.044522</td>\n",
       "      <td>2.302585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.602690</td>\n",
       "      <td>1.386294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.983153</td>\n",
       "      <td>1.791759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.178054</td>\n",
       "      <td>2.197225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.367296</td>\n",
       "      <td>2.302585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2.731115</td>\n",
       "      <td>1.791759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2.944439</td>\n",
       "      <td>1.945910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2.251292</td>\n",
       "      <td>1.098612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2.884801</td>\n",
       "      <td>2.302585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2.931194</td>\n",
       "      <td>2.197225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2.987196</td>\n",
       "      <td>2.079442</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2.374906</td>\n",
       "      <td>1.386294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2.814210</td>\n",
       "      <td>1.945910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2.442347</td>\n",
       "      <td>1.098612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2.487404</td>\n",
       "      <td>1.098612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2.700018</td>\n",
       "      <td>1.386294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2.621039</td>\n",
       "      <td>1.791759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2.896464</td>\n",
       "      <td>1.945910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2.079442</td>\n",
       "      <td>0.693147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2.880882</td>\n",
       "      <td>1.945910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>3.068053</td>\n",
       "      <td>1.609438</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Delivery   Sorting\n",
       "0   3.044522  2.302585\n",
       "1   2.602690  1.386294\n",
       "2   2.983153  1.791759\n",
       "3   3.178054  2.197225\n",
       "4   3.367296  2.302585\n",
       "5   2.731115  1.791759\n",
       "6   2.944439  1.945910\n",
       "7   2.251292  1.098612\n",
       "8   2.884801  2.302585\n",
       "9   2.931194  2.197225\n",
       "10  2.987196  2.079442\n",
       "11  2.374906  1.386294\n",
       "12  2.814210  1.945910\n",
       "13  2.442347  1.098612\n",
       "14  2.487404  1.098612\n",
       "15  2.700018  1.386294\n",
       "16  2.621039  1.791759\n",
       "17  2.896464  1.945910\n",
       "18  2.079442  0.693147\n",
       "19  2.880882  1.945910\n",
       "20  3.068053  1.609438"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "2e323ccb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery</th>\n",
       "      <th>Sorting</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Delivery</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.878727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sorting</th>\n",
       "      <td>0.878727</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          Delivery   Sorting\n",
       "Delivery  1.000000  0.878727\n",
       "Sorting   0.878727  1.000000"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_new.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "9207421d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Delivery    0\n",
       "Sorting     0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_new.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "9a2b4692",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(21, 2)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_new.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fcb2a546",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "df9856e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 21 entries, 0 to 20\n",
      "Data columns (total 2 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Delivery  21 non-null     float64\n",
      " 1   Sorting   21 non-null     float64\n",
      "dtypes: float64(2)\n",
      "memory usage: 464.0 bytes\n"
     ]
    }
   ],
   "source": [
    "data_new.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ebfa0cc",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "745f270d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "5bc504a1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\user\\AppData\\Local\\Temp\\ipykernel_5844\\3105862250.py:1: UserWarning: \n",
      "\n",
      "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
      "\n",
      "Please adapt your code to use either `displot` (a figure-level function with\n",
      "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "\n",
      "For a guide to updating your code to use the new functions, please see\n",
      "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
      "\n",
      "  sn.distplot(data_new)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Delivery')"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sn.distplot(data_new)\n",
    "plt.xlabel('Sorting')\n",
    "plt.ylabel('Delivery')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "a8089829",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Delivery</th>\n",
       "      <th>Sorting</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.044522</td>\n",
       "      <td>2.302585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2.602690</td>\n",
       "      <td>1.386294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.983153</td>\n",
       "      <td>1.791759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.178054</td>\n",
       "      <td>2.197225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.367296</td>\n",
       "      <td>2.302585</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Delivery   Sorting\n",
       "0  3.044522  2.302585\n",
       "1  2.602690  1.386294\n",
       "2  2.983153  1.791759\n",
       "3  3.178054  2.197225\n",
       "4  3.367296  2.302585"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## create a linear regression model\n",
    "\n",
    "data_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "a6015dd2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Delivery  Sorting \n",
       "2.079442  0.693147    1\n",
       "2.884801  2.302585    1\n",
       "3.178054  2.197225    1\n",
       "3.068053  1.609438    1\n",
       "3.044522  2.302585    1\n",
       "2.987196  2.079442    1\n",
       "2.983153  1.791759    1\n",
       "2.944439  1.945910    1\n",
       "2.931194  2.197225    1\n",
       "2.896464  1.945910    1\n",
       "2.880882  1.945910    1\n",
       "2.251292  1.098612    1\n",
       "2.814210  1.945910    1\n",
       "2.731115  1.791759    1\n",
       "2.700018  1.386294    1\n",
       "2.621039  1.791759    1\n",
       "2.602690  1.386294    1\n",
       "2.487404  1.098612    1\n",
       "2.442347  1.098612    1\n",
       "2.374906  1.386294    1\n",
       "3.367296  2.302585    1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_new.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "a7c2747c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     3.044522\n",
       "1     2.602690\n",
       "2     2.983153\n",
       "3     3.178054\n",
       "4     3.367296\n",
       "5     2.731115\n",
       "6     2.944439\n",
       "7     2.251292\n",
       "8     2.884801\n",
       "9     2.931194\n",
       "10    2.987196\n",
       "11    2.374906\n",
       "12    2.814210\n",
       "13    2.442347\n",
       "14    2.487404\n",
       "15    2.700018\n",
       "16    2.621039\n",
       "17    2.896464\n",
       "18    2.079442\n",
       "19    2.880882\n",
       "20    3.068053\n",
       "Name: Delivery, dtype: float64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_new['Delivery']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9e41e84",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8de0a6df",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "1fa7b40b",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "models = smf.ols(\"Delivery~Sorting\" , data = data_new).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "28b5eafb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x14868511180>"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "4ee8ca5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Sorting', ylabel='Delivery'>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sn.regplot(x = \"Sorting\" , y = \"Delivery\" , data = data_new)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "640b2dfb",
   "metadata": {},
   "outputs": [],
   "source": [
    "## calculate the r_squared value and the r_squared_adj\n",
    "## calculate the p_value and t_value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "2f885853",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept    1.741987\n",
       "Sorting      0.597522\n",
       "dtype: float64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "models.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "11742057",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.77216134926874 0.7601698413355158\n"
     ]
    }
   ],
   "source": [
    "print(models.rsquared , models.rsquared_adj)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "feefc8e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept    13.085552\n",
      "Sorting       8.024484\n",
      "dtype: float64 \n",
      " Intercept    5.921137e-11\n",
      "Sorting      1.601539e-07\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(models.tvalues , '\\n' , models.pvalues)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "4b2ce13a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>        <td>Delivery</td>     <th>  R-squared:         </th> <td>   0.772</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.760</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   64.39</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Wed, 16 Aug 2023</td> <th>  Prob (F-statistic):</th> <td>1.60e-07</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>22:49:28</td>     <th>  Log-Likelihood:    </th> <td>  10.291</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    21</td>      <th>  AIC:               </th> <td>  -16.58</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    19</td>      <th>  BIC:               </th> <td>  -14.49</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>    1.7420</td> <td>    0.133</td> <td>   13.086</td> <td> 0.000</td> <td>    1.463</td> <td>    2.021</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Sorting</th>   <td>    0.5975</td> <td>    0.074</td> <td>    8.024</td> <td> 0.000</td> <td>    0.442</td> <td>    0.753</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 1.871</td> <th>  Durbin-Watson:     </th> <td>   1.322</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.392</td> <th>  Jarque-Bera (JB):  </th> <td>   1.170</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.577</td> <th>  Prob(JB):          </th> <td>   0.557</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.916</td> <th>  Cond. No.          </th> <td>    9.08</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/latex": [
       "\\begin{center}\n",
       "\\begin{tabular}{lclc}\n",
       "\\toprule\n",
       "\\textbf{Dep. Variable:}    &     Delivery     & \\textbf{  R-squared:         } &     0.772   \\\\\n",
       "\\textbf{Model:}            &       OLS        & \\textbf{  Adj. R-squared:    } &     0.760   \\\\\n",
       "\\textbf{Method:}           &  Least Squares   & \\textbf{  F-statistic:       } &     64.39   \\\\\n",
       "\\textbf{Date:}             & Wed, 16 Aug 2023 & \\textbf{  Prob (F-statistic):} &  1.60e-07   \\\\\n",
       "\\textbf{Time:}             &     22:49:28     & \\textbf{  Log-Likelihood:    } &    10.291   \\\\\n",
       "\\textbf{No. Observations:} &          21      & \\textbf{  AIC:               } &    -16.58   \\\\\n",
       "\\textbf{Df Residuals:}     &          19      & \\textbf{  BIC:               } &    -14.49   \\\\\n",
       "\\textbf{Df Model:}         &           1      & \\textbf{                     } &             \\\\\n",
       "\\textbf{Covariance Type:}  &    nonrobust     & \\textbf{                     } &             \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "\\begin{tabular}{lcccccc}\n",
       "                   & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n",
       "\\midrule\n",
       "\\textbf{Intercept} &       1.7420  &        0.133     &    13.086  &         0.000        &        1.463    &        2.021     \\\\\n",
       "\\textbf{Sorting}   &       0.5975  &        0.074     &     8.024  &         0.000        &        0.442    &        0.753     \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "\\begin{tabular}{lclc}\n",
       "\\textbf{Omnibus:}       &  1.871 & \\textbf{  Durbin-Watson:     } &    1.322  \\\\\n",
       "\\textbf{Prob(Omnibus):} &  0.392 & \\textbf{  Jarque-Bera (JB):  } &    1.170  \\\\\n",
       "\\textbf{Skew:}          &  0.577 & \\textbf{  Prob(JB):          } &    0.557  \\\\\n",
       "\\textbf{Kurtosis:}      &  2.916 & \\textbf{  Cond. No.          } &     9.08  \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "%\\caption{OLS Regression Results}\n",
       "\\end{center}\n",
       "\n",
       "Notes: \\newline\n",
       " [1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:               Delivery   R-squared:                       0.772\n",
       "Model:                            OLS   Adj. R-squared:                  0.760\n",
       "Method:                 Least Squares   F-statistic:                     64.39\n",
       "Date:                Wed, 16 Aug 2023   Prob (F-statistic):           1.60e-07\n",
       "Time:                        22:49:28   Log-Likelihood:                 10.291\n",
       "No. Observations:                  21   AIC:                            -16.58\n",
       "Df Residuals:                      19   BIC:                            -14.49\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept      1.7420      0.133     13.086      0.000       1.463       2.021\n",
       "Sorting        0.5975      0.074      8.024      0.000       0.442       0.753\n",
       "==============================================================================\n",
       "Omnibus:                        1.871   Durbin-Watson:                   1.322\n",
       "Prob(Omnibus):                  0.392   Jarque-Bera (JB):                1.170\n",
       "Skew:                           0.577   Prob(JB):                        0.557\n",
       "Kurtosis:                       2.916   Cond. No.                         9.08\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "models.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d128e918",
   "metadata": {},
   "source": [
    "## Answer = 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "cbc6d13e",
   "metadata": {},
   "outputs": [],
   "source": [
    "datasets = pd.read_csv(r\"C:\\Users\\user\\Downloads\\Salary_Data.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "d8d34ba6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YearsExperience</th>\n",
       "      <th>Salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.1</td>\n",
       "      <td>39343.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.3</td>\n",
       "      <td>46205.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.5</td>\n",
       "      <td>37731.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.0</td>\n",
       "      <td>43525.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.2</td>\n",
       "      <td>39891.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2.9</td>\n",
       "      <td>56642.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3.0</td>\n",
       "      <td>60150.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>3.2</td>\n",
       "      <td>54445.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3.2</td>\n",
       "      <td>64445.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>3.7</td>\n",
       "      <td>57189.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3.9</td>\n",
       "      <td>63218.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>4.0</td>\n",
       "      <td>55794.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>4.0</td>\n",
       "      <td>56957.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>4.1</td>\n",
       "      <td>57081.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>4.5</td>\n",
       "      <td>61111.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>4.9</td>\n",
       "      <td>67938.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>5.1</td>\n",
       "      <td>66029.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>5.3</td>\n",
       "      <td>83088.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>5.9</td>\n",
       "      <td>81363.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>6.0</td>\n",
       "      <td>93940.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>6.8</td>\n",
       "      <td>91738.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>7.1</td>\n",
       "      <td>98273.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>7.9</td>\n",
       "      <td>101302.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>8.2</td>\n",
       "      <td>113812.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>8.7</td>\n",
       "      <td>109431.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>9.0</td>\n",
       "      <td>105582.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>9.5</td>\n",
       "      <td>116969.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>9.6</td>\n",
       "      <td>112635.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>10.3</td>\n",
       "      <td>122391.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>10.5</td>\n",
       "      <td>121872.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    YearsExperience    Salary\n",
       "0               1.1   39343.0\n",
       "1               1.3   46205.0\n",
       "2               1.5   37731.0\n",
       "3               2.0   43525.0\n",
       "4               2.2   39891.0\n",
       "5               2.9   56642.0\n",
       "6               3.0   60150.0\n",
       "7               3.2   54445.0\n",
       "8               3.2   64445.0\n",
       "9               3.7   57189.0\n",
       "10              3.9   63218.0\n",
       "11              4.0   55794.0\n",
       "12              4.0   56957.0\n",
       "13              4.1   57081.0\n",
       "14              4.5   61111.0\n",
       "15              4.9   67938.0\n",
       "16              5.1   66029.0\n",
       "17              5.3   83088.0\n",
       "18              5.9   81363.0\n",
       "19              6.0   93940.0\n",
       "20              6.8   91738.0\n",
       "21              7.1   98273.0\n",
       "22              7.9  101302.0\n",
       "23              8.2  113812.0\n",
       "24              8.7  109431.0\n",
       "25              9.0  105582.0\n",
       "26              9.5  116969.0\n",
       "27              9.6  112635.0\n",
       "28             10.3  122391.0\n",
       "29             10.5  121872.0"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "70cf71cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "datasets_new = np.log(datasets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "dda79ace",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YearsExperience</th>\n",
       "      <th>Salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.095310</td>\n",
       "      <td>10.580073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.262364</td>\n",
       "      <td>10.740843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.405465</td>\n",
       "      <td>10.538237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.693147</td>\n",
       "      <td>10.681091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.788457</td>\n",
       "      <td>10.593906</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   YearsExperience     Salary\n",
       "0         0.095310  10.580073\n",
       "1         0.262364  10.740843\n",
       "2         0.405465  10.538237\n",
       "3         0.693147  10.681091\n",
       "4         0.788457  10.593906"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datasets_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "5a3932f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 30 entries, 0 to 29\n",
      "Data columns (total 2 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   YearsExperience  30 non-null     float64\n",
      " 1   Salary           30 non-null     float64\n",
      "dtypes: float64(2)\n",
      "memory usage: 608.0 bytes\n"
     ]
    }
   ],
   "source": [
    "datasets_new.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "1f0e7afb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "YearsExperience    0\n",
       "Salary             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datasets_new.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "5d75f0d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YearsExperience</th>\n",
       "      <th>Salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>YearsExperience</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.951428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Salary</th>\n",
       "      <td>0.951428</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 YearsExperience    Salary\n",
       "YearsExperience         1.000000  0.951428\n",
       "Salary                  0.951428  1.000000"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datasets_new.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "a477ae2c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\user\\AppData\\Local\\Temp\\ipykernel_5844\\176766255.py:1: UserWarning: \n",
      "\n",
      "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
      "\n",
      "Please adapt your code to use either `displot` (a figure-level function with\n",
      "similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "\n",
      "For a guide to updating your code to use the new functions, please see\n",
      "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
      "\n",
      "  sn.distplot(datasets_new)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Salary')"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sn.distplot(datasets_new)\n",
    "plt.xlabel('YearsExperiance')\n",
    "plt.ylabel('Salary')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "050c840b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YearsExperience</th>\n",
       "      <th>Salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.095310</td>\n",
       "      <td>10.580073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.262364</td>\n",
       "      <td>10.740843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.405465</td>\n",
       "      <td>10.538237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.693147</td>\n",
       "      <td>10.681091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.788457</td>\n",
       "      <td>10.593906</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   YearsExperience     Salary\n",
       "0         0.095310  10.580073\n",
       "1         0.262364  10.740843\n",
       "2         0.405465  10.538237\n",
       "3         0.693147  10.681091\n",
       "4         0.788457  10.593906"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datasets_new.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "426ab021",
   "metadata": {},
   "outputs": [],
   "source": [
    "## build a model\n",
    "\n",
    "df3 = datasets_new.rename(columns = {\"YearsExperience\" : \"Exp\" , \"Salary\" : \"Salary\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "f633b6c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Exp</th>\n",
       "      <th>Salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.095310</td>\n",
       "      <td>10.580073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.262364</td>\n",
       "      <td>10.740843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.405465</td>\n",
       "      <td>10.538237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.693147</td>\n",
       "      <td>10.681091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.788457</td>\n",
       "      <td>10.593906</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1.064711</td>\n",
       "      <td>10.944506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1.098612</td>\n",
       "      <td>11.004597</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1.163151</td>\n",
       "      <td>10.904946</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1.163151</td>\n",
       "      <td>11.073567</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1.308333</td>\n",
       "      <td>10.954117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1.360977</td>\n",
       "      <td>11.054344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1.386294</td>\n",
       "      <td>10.929422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1.386294</td>\n",
       "      <td>10.950052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1.410987</td>\n",
       "      <td>10.952227</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1.504077</td>\n",
       "      <td>11.020447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1.589235</td>\n",
       "      <td>11.126351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1.629241</td>\n",
       "      <td>11.097849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1.667707</td>\n",
       "      <td>11.327656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1.774952</td>\n",
       "      <td>11.306676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1.791759</td>\n",
       "      <td>11.450412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>1.916923</td>\n",
       "      <td>11.426692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>1.960095</td>\n",
       "      <td>11.495505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2.066863</td>\n",
       "      <td>11.525861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2.104134</td>\n",
       "      <td>11.642303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2.163323</td>\n",
       "      <td>11.603049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>2.197225</td>\n",
       "      <td>11.567243</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>2.251292</td>\n",
       "      <td>11.669664</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>2.261763</td>\n",
       "      <td>11.631908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>2.332144</td>\n",
       "      <td>11.714976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>2.351375</td>\n",
       "      <td>11.710727</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Exp     Salary\n",
       "0   0.095310  10.580073\n",
       "1   0.262364  10.740843\n",
       "2   0.405465  10.538237\n",
       "3   0.693147  10.681091\n",
       "4   0.788457  10.593906\n",
       "5   1.064711  10.944506\n",
       "6   1.098612  11.004597\n",
       "7   1.163151  10.904946\n",
       "8   1.163151  11.073567\n",
       "9   1.308333  10.954117\n",
       "10  1.360977  11.054344\n",
       "11  1.386294  10.929422\n",
       "12  1.386294  10.950052\n",
       "13  1.410987  10.952227\n",
       "14  1.504077  11.020447\n",
       "15  1.589235  11.126351\n",
       "16  1.629241  11.097849\n",
       "17  1.667707  11.327656\n",
       "18  1.774952  11.306676\n",
       "19  1.791759  11.450412\n",
       "20  1.916923  11.426692\n",
       "21  1.960095  11.495505\n",
       "22  2.066863  11.525861\n",
       "23  2.104134  11.642303\n",
       "24  2.163323  11.603049\n",
       "25  2.197225  11.567243\n",
       "26  2.251292  11.669664\n",
       "27  2.261763  11.631908\n",
       "28  2.332144  11.714976\n",
       "29  2.351375  11.710727"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "4c1c0e37",
   "metadata": {},
   "outputs": [],
   "source": [
    "datasets_new = df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "d72f7497",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Exp</th>\n",
       "      <th>Salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.095310</td>\n",
       "      <td>10.580073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.262364</td>\n",
       "      <td>10.740843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.405465</td>\n",
       "      <td>10.538237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.693147</td>\n",
       "      <td>10.681091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.788457</td>\n",
       "      <td>10.593906</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Exp     Salary\n",
       "0  0.095310  10.580073\n",
       "1  0.262364  10.740843\n",
       "2  0.405465  10.538237\n",
       "3  0.693147  10.681091\n",
       "4  0.788457  10.593906"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "ce8dbee9",
   "metadata": {},
   "outputs": [],
   "source": [
    "models1 = smf.ols(\"Salary~Exp\" , data = df3).fit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "4db599e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x14869d46a70>"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "models1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "5ba31f2d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Exp', ylabel='Salary'>"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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1gAAli5diq1bt+Lee+9FW1sb7rzzTjQ3N2PatGl44403YDabO59TXV0NUfyyoHjmmWcgSRL+4z/+I+C1Hn74Yaxbty6yb4iIiIgSQtzkAMWTSOYAERERUWQMixwgIiIiokhhAURERERJhwUQERERJR0WQERERJR0WAARERFR0mEBREREREmHBRARERElHRZARERElHRYABEREVHSYQFERERESYcFEBERESUdFkBERESUdFgAERERUdJRx3oA8UhRFAD+XWWJiIgoMXT8bnf8jveHBVAvbDYbAKCoqCjGIyEiIqJQ2Ww2pKam9vsYQQmmTEoysiyjtrYWZrMZgiDAarWiqKgINTU1sFgssR5e0uPnEV/4ecQXfh7xhZ9HdCmKApvNhoKCAohi/10+vALUC1EUMWLEiB7HLRYL/wOOI/w84gs/j/jCzyO+8POInoGu/HRgEzQRERElHRZARERElHRYAAVBp9Ph4Ycfhk6ni/VQCPw84g0/j/jCzyO+8POIX2yCJiIioqTDK0BERESUdFgAERERUdJhAURERERJhwUQERERJR0WQO2eeeYZjB49Gnq9HlOmTMHbb7/d7+P37t2LKVOmQK/XY8yYMfjNb34TpZEmh1A+jz179kAQhB5//v3vf0dxxMPTvn37sHDhQhQUFEAQBOzYsWPA5/C7ETmhfh78bkTOhg0bcPnll8NsNiMnJwc33HADjh07NuDz+P2IHyyAAPz1r3/FqlWr8OMf/xiHDh3CrFmzcP3116O6urrXx1dVVeErX/kKZs2ahUOHDuGBBx7APffcg1deeSXKIx+eQv08Ohw7dgxnz57t/FNWVhalEQ9fDocDEydOxObNm4N6PL8bkRXq59GB343w27t3L1asWIH3338fO3fuhNfrxTXXXAOHw9Hnc/j9iDMKKVOnTlV+9KMfBRy78MILlfvvv7/Xx997773KhRdeGHDsjjvuUKZPnx6xMSaTUD+P3bt3KwCU5ubmKIwueQFQtm/f3u9j+N2InmA+D343oqe+vl4BoOzdu7fPx/D7EV+S/gqQJEn46KOPcM011wQcv+aaa7B///5en/Pee+/1ePy1116LgwcPwuPxRGysyWAwn0eHyZMnIz8/H/PmzcPu3bsjOUzqA78b8YnfjchrbW0FAGRkZPT5GH4/4kvSF0ANDQ3w+XzIzc0NOJ6bm4u6urpen1NXV9fr471eLxoaGiI21mQwmM8jPz8fv/vd7/DKK6/g1VdfxQUXXIB58+Zh37590RgydcHvRnzhdyM6FEXBmjVrcOWVV+Liiy/u83H8fsQX7gbfThCEgNuKovQ4NtDjeztOgxPK53HBBRfgggsu6Lx9xRVXoKamBr/85S9x1VVXRXSc1BO/G/GD343ouOuuu/Dpp5/inXfeGfCx/H7Ej6S/ApSVlQWVStXj6kJ9fX2PSr1DXl5er49Xq9XIzMyM2FiTwWA+j95Mnz4d5eXl4R4eDYDfjfjH70Z43X333Xjttdewe/dujBgxot/H8vsRX5K+ANJqtZgyZQp27twZcHznzp2YMWNGr8+54oorejz+jTfewGWXXQaNRhOxsSaDwXwevTl06BDy8/PDPTwaAL8b8Y/fjfBQFAV33XUXXn31Vbz11lsYPXr0gM/h9yPOxLABO2785S9/UTQajfLcc88pn3/+ubJq1SrFaDQqJ0+eVBRFUe6//35l8eLFnY8/ceKEYjAYlNWrVyuff/658txzzykajUZ5+eWXY/UWhpVQP48nnnhC2b59u3L8+HHls88+U+6//34FgPLKK6/E6i0MGzabTTl06JBy6NAhBYCyceNG5dChQ8qpU6cUReF3I9pC/Tz43Yic5cuXK6mpqcqePXuUs2fPdv5xOp2dj+H3I76xAGr361//Whk5cqSi1WqVSy+9NGAp49KlS5XZs2cHPH7Pnj3K5MmTFa1Wq4waNUrZsmVLlEc8vIXyeTz66KNKSUmJotfrlfT0dOXKK69U/u///i8Gox5+OpZRd/+zdOlSRVH43Yi2UD8Pfjcip7fPAYDywgsvdD6G34/4JihKewcWERERUZJI+h4gIiIiSj4sgIiIiCjpsAAiIiKipMMCiIiIiJIOCyAiIiJKOiyAiIiIKOmwACIiIqKkwwKIiIiIkg4LICIiIko6LICIaFi47bbbIAhCjz/XXXddrIdGRHFIHesBEBGFy3XXXYcXXngh4JhOp4vRaIgonvEKEBENGzqdDnl5eQF/0tPTsWfPHmi1Wrz99tudj/3Vr36FrKwsnD17FgAwZ84c3HXXXbjrrruQlpaGzMxMPPjgg+B2iUTDEwsgIhr25syZg1WrVmHx4sVobW3FJ598gh//+Md49tlnkZ+f3/m4F198EWq1Gh988AGeeuopPPHEE/j9738fw5ETUaRwN3giGhZuu+02/OlPf4Jerw84ft999+Ghhx6CJEmYPn06ysrKcPToUVxxxRV49tlnOx83Z84c1NfX4+jRoxAEAQBw//3347XXXsPnn38e1fdCRJHHHiAiGjbmzp2LLVu2BBzLyMgAAGi1WvzpT3/CJZdcgpEjR2LTpk09nj99+vTO4gcArrjiCvzqV7+Cz+eDSqWK6NiJKLpYABHRsGE0GlFaWtrn/fv37wcANDU1oampCUajMVpDI6I4wx4gIkoKlZWVWL16NZ599llMnz4dS5YsgSzLAY95//33e9wuKyvj1R+iYYgFEBENG263G3V1dQF/Ghoa4PP5sHjxYlxzzTVYtmwZXnjhBXz22Wf41a9+FfD8mpoarFmzBseOHcNLL72Ep59+GitXrozRuyGiSOIUGBENG//85z8DVnUBwAUXXIBFixbh5MmT+Mc//gEAyMvLw+9//3t861vfwoIFCzBp0iQAwJIlS9DW1oapU6dCpVLh7rvvxg9/+MNovw0iigKuAiMign8V2KRJk3ptjiai4YdTYERERJR0WAARERFR0uEUGBERESUdXgEiIiKipMMCiIiIiJIOCyAiIiJKOiyAiIiIKOmwACIiIqKkwwKIiIiIkg4LICIiIko6LICIiIgo6fx/l0Ed6HFIjg8AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sn.regplot(x = 'Exp' , y = 'Salary' , data = df3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "b6072a03",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept    10.328043\n",
       "Exp           0.562089\n",
       "dtype: float64"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "models1.params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "de94558f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.905215072581715 0.9018298966024905\n"
     ]
    }
   ],
   "source": [
    "print(models1.rsquared , models1.rsquared_adj)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "165b7572",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept    184.867959\n",
      "Exp           16.352542\n",
      "dtype: float64 \n",
      " Intercept    9.073132e-45\n",
      "Exp          7.395278e-16\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(models1.tvalues , '\\n' , models1.pvalues)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "3c018eea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>Salary</td>      <th>  R-squared:         </th> <td>   0.905</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.902</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   267.4</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Wed, 16 Aug 2023</td> <th>  Prob (F-statistic):</th> <td>7.40e-16</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>22:53:25</td>     <th>  Log-Likelihood:    </th> <td>  23.209</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>    30</td>      <th>  AIC:               </th> <td>  -42.42</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>    28</td>      <th>  BIC:               </th> <td>  -39.61</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>   10.3280</td> <td>    0.056</td> <td>  184.868</td> <td> 0.000</td> <td>   10.214</td> <td>   10.442</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Exp</th>       <td>    0.5621</td> <td>    0.034</td> <td>   16.353</td> <td> 0.000</td> <td>    0.492</td> <td>    0.632</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 0.102</td> <th>  Durbin-Watson:     </th> <td>   0.988</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.950</td> <th>  Jarque-Bera (JB):  </th> <td>   0.297</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.093</td> <th>  Prob(JB):          </th> <td>   0.862</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.549</td> <th>  Cond. No.          </th> <td>    5.76</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/latex": [
       "\\begin{center}\n",
       "\\begin{tabular}{lclc}\n",
       "\\toprule\n",
       "\\textbf{Dep. Variable:}    &      Salary      & \\textbf{  R-squared:         } &     0.905   \\\\\n",
       "\\textbf{Model:}            &       OLS        & \\textbf{  Adj. R-squared:    } &     0.902   \\\\\n",
       "\\textbf{Method:}           &  Least Squares   & \\textbf{  F-statistic:       } &     267.4   \\\\\n",
       "\\textbf{Date:}             & Wed, 16 Aug 2023 & \\textbf{  Prob (F-statistic):} &  7.40e-16   \\\\\n",
       "\\textbf{Time:}             &     22:53:25     & \\textbf{  Log-Likelihood:    } &    23.209   \\\\\n",
       "\\textbf{No. Observations:} &          30      & \\textbf{  AIC:               } &    -42.42   \\\\\n",
       "\\textbf{Df Residuals:}     &          28      & \\textbf{  BIC:               } &    -39.61   \\\\\n",
       "\\textbf{Df Model:}         &           1      & \\textbf{                     } &             \\\\\n",
       "\\textbf{Covariance Type:}  &    nonrobust     & \\textbf{                     } &             \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "\\begin{tabular}{lcccccc}\n",
       "                   & \\textbf{coef} & \\textbf{std err} & \\textbf{t} & \\textbf{P$> |$t$|$} & \\textbf{[0.025} & \\textbf{0.975]}  \\\\\n",
       "\\midrule\n",
       "\\textbf{Intercept} &      10.3280  &        0.056     &   184.868  &         0.000        &       10.214    &       10.442     \\\\\n",
       "\\textbf{Exp}       &       0.5621  &        0.034     &    16.353  &         0.000        &        0.492    &        0.632     \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "\\begin{tabular}{lclc}\n",
       "\\textbf{Omnibus:}       &  0.102 & \\textbf{  Durbin-Watson:     } &    0.988  \\\\\n",
       "\\textbf{Prob(Omnibus):} &  0.950 & \\textbf{  Jarque-Bera (JB):  } &    0.297  \\\\\n",
       "\\textbf{Skew:}          &  0.093 & \\textbf{  Prob(JB):          } &    0.862  \\\\\n",
       "\\textbf{Kurtosis:}      &  2.549 & \\textbf{  Cond. No.          } &     5.76  \\\\\n",
       "\\bottomrule\n",
       "\\end{tabular}\n",
       "%\\caption{OLS Regression Results}\n",
       "\\end{center}\n",
       "\n",
       "Notes: \\newline\n",
       " [1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                 Salary   R-squared:                       0.905\n",
       "Model:                            OLS   Adj. R-squared:                  0.902\n",
       "Method:                 Least Squares   F-statistic:                     267.4\n",
       "Date:                Wed, 16 Aug 2023   Prob (F-statistic):           7.40e-16\n",
       "Time:                        22:53:25   Log-Likelihood:                 23.209\n",
       "No. Observations:                  30   AIC:                            -42.42\n",
       "Df Residuals:                      28   BIC:                            -39.61\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept     10.3280      0.056    184.868      0.000      10.214      10.442\n",
       "Exp            0.5621      0.034     16.353      0.000       0.492       0.632\n",
       "==============================================================================\n",
       "Omnibus:                        0.102   Durbin-Watson:                   0.988\n",
       "Prob(Omnibus):                  0.950   Jarque-Bera (JB):                0.297\n",
       "Skew:                           0.093   Prob(JB):                        0.862\n",
       "Kurtosis:                       2.549   Cond. No.                         5.76\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "models1.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "590bcd74",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
